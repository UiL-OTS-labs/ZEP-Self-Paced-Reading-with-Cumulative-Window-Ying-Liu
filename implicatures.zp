requires 1.14;

import std_windows1;
import std_texts_nl;
import instruction_texts_nl;

import participant;

import std_entry_page1;
import std_exit_page1;
import std_pause_page;
import std_blank_page;
import response_box;

import output;

import test::task;

enum ButtonOption {
    LEFT_BUTTON,
    MIDDLE_BUTTON,
    RIGHT_BUTTON,
    ERROR_CHOICE,
}

Experiment experiment
{
    bool LEFT_BUTTON_VALUE = true;
    bool RIGHT_BUTTON_VALUE = false;

    on_event:entry()
    {
        if(check_participant_fields() != OK)
            terminate;
        setup_button_values();

        control.button_box.open();
        show_test_windows();

    }

    void setup_button_values()
    {
        if(expdb.participant.get_enum_field("left_button") == "true")
        {
            LEFT_BUTTON_VALUE = true;
            RIGHT_BUTTON_VALUE = !LEFT_BUTTON_VALUE;
        }
        else
        {
            LEFT_BUTTON_VALUE = false;
            RIGHT_BUTTON_VALUE = !LEFT_BUTTON_VALUE;
        }
    }

    on_event:message()
    {
        // On Ctrl+F4 jump unconditionally to the thank-you part.
        if (message_sender == control && message_arg == SYS_STOP)
        {
            control.mark_experiment_aborted();
            thankyou.enter();
        }
    }


    Part welcome
    {
        on_event:entry()
        {
            entry_page.set_text(WELCOME_TEXT);
            entry_page.action(this, 0s);
        }
    }

    Part welcome_2
    {
        on_event:entry()
        {
            pause_page.set_text( WELCOME_TEXT2, true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }

    Part phase1
    {
        on_event:entry()
        {
            test::action(this);
        }
    }


    Part thankyou
    {
        on_event:entry()
        {
            control.end_experiment();   // Check-in session.

            exit_page.set_text(THANK_YOU_TEXT);
            exit_page.action(this, 10s);

            control.button_box.close();
        }
    }
}
