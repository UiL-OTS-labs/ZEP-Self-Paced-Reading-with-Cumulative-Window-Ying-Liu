import std_choose_1of2_page;

import defs;
import stimuli;
import shuffle;
import output;
import test_page;


Block task
{
    Part instructions
    {
        on_event:entry()
        {
            pause_page.set_text( INSTRUCTION_TEXT, true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }

    Part instructions2
    {
        on_event:entry()
        {
            pause_page.set_text( INSTRUCTION_TEXT2, true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }


    Block practice
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            num_cycles = prac_items.size;

            // Prepare test page: progress bar and prompt enabled.
            test_page.setup(num_cycles, true);
        }


        on_event:exit()
        {
            test_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = prac_items[practice.cycle];

                 test_page.action(this, item, reference_time, practice.cycle);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Part pause
    {
        on_event:entry()
        {
            pause_page.set_text(AFTER_PRACTICE_TEXT, true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }


    Block test
    {
        TestItem        item;   // current item
        TestOutput      output; // current output table row


        on_event:entry()
        {
            // Randomize test items table.
            if (shuffle_test_items() != OK) terminate;

            num_cycles = test_items.size;

            // Prepare test page: progress bar enabled, prompt disabled.
            test_page.setup(num_cycles, false);
        }


        on_event:exit()
        {
            test_page.cleanup();

            // Save test output table as CSV file.
            test_output_save();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_items[test.cycle];
            }

            on_event:exit()
            {
                // Add new row to test output table.
                test_output_append(output);
            }


            SubTrial presentation
            {
                on_event:entry()
                {
                    test_page.action(this, item, reference_time, test.cycle);
                }
            }


            TransientPart
            {
                on_event:entry()
                {
                    if(!at_a_pause_trial())
                        trial.leave();  // No question. Trial done.
                }

                bool at_a_pause_trial()
                {
                    return test.cycle == test.num_cycles/2;
                }
            }


            SubTrial question
            {
                on_event:entry()
                {
                    pause_page.set_text( PAUSE_TEXT, true);
                    pause_page.action(this);
                }
            }
        }
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}
